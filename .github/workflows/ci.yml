---
name: CI
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
jobs:
  test:
    if: "!contains(github.event.head_commit.message, 'skipci')"
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.23.x, 1.24.x]
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-

      - name: Install dependencies
        run: task bot:setup

      - name: Run tests
        run: go test -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Run tests with verbose output
        run: task test

      - name: Check test coverage
        run: |
          go tool cover -func=coverage.out
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
          echo "Total test coverage: ${COVERAGE}%"
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "Warning: Test coverage is below 80%"
          fi

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  check:
    name: Check (Lint & Security)
    if: "!contains(github.event.head_commit.message, 'skipci')"
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.24.x

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install dependencies
        run: task bot:setup

      - name: Install required tools
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
          go install github.com/kisielk/errcheck@latest

      - name: Install dprint
        run: |
          curl -fsSL https://dprint.dev/install.sh | sh
          echo "$HOME/.dprint/bin" >> $GITHUB_PATH

      - name: Run all checks
        run: task check

  build:
    name: Build
    if: "!contains(github.event.head_commit.message, 'skipci')"
    runs-on: ubuntu-latest
    needs: [test, check]
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.24.x

      - name: Build application
        run: |
          go build -v ./cmd/bot
          ./bot --help

      - name: Build Docker image
        run: |
          docker build -f docker/bot/prod.Dockerfile -t slackbot:latest .

  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    if: |-
      !contains(github.event.head_commit.message, 'skipci') && github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.24.x

      - name: Run benchmarks
        run: |
          go test -bench=. -benchmem ./... | tee benchmark.txt

      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: go
          output-file-path: benchmark.txt
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
          comment-on-alert: true
          alert-threshold: 200%
          fail-on-alert: true
